spring.application.name=${APPLICATION_NAME:spring-security-first-section}
logging.pattern.console=${LOGGING_PATTERN_CONSOLE:%green(%d{HH:mm:ss.SSS}) %blue(%-5level) %red([%thread]) %yellow(%logger{15}) - %msg%n}
logging.level.org.springframework.security=${LOGGING_LEVEL_SPRING_SECURITY:debug}

#spring.security.user.name=${SECURITY_USERNAME:tom}
#spring.security.user.password=${SECURITY_PASSWORD:123456}

spring.datasource.url=jdbc:mysql://${DATABASE_HOST:localhost}:${DATABASE_PORT:3315}/${DATABASE_NAME:learn_spring_security}
spring.datasource.username=${DATABASE_USERNAME:tommap}
spring.datasource.password=${DATABASE_PASSWORD:123456}
spring.jpa.show-sql=${JPA_SHOW_SQL:true}
spring.jpa.properties.hibernate.format_sql=${HIBERNATE_FORMAT_SQL:true}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

#logging.level.org.springframework.jdbc=${LOGGING_LEVEL_SPRING_JDBC:debug}

spring.profiles.active=${SPRING_PROFILES_ACTIVE:default}
spring.config.import=${SPRING_CONFIG_IMPORT:optional:application-prod.properties}

server.servlet.session.timeout=${SERVER_SERVLET_SESSION_TIMEOUT:20m}

#download public key information from auth server to perform token validation
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${JWK_SET_URI:http://localhost:8180/realms/tomdev/protocol/openid-connect/certs}

#give details to resource server which endpoint URL that the resource server has to call on auth server to validate opaque or access token
#resource server need to register itself as a client on auth server to get client id and client secret
spring.security.oauth2.resourceserver.opaquetoken.introspection-uri=${INTROSPECTION_URI:http://localhost:8180/realms/tomdev/protocol/openid-connect/token/introspect}
spring.security.oauth2.resourceserver.opaquetoken.client-id=${CLIENT_ID:tomresourceserver}
spring.security.oauth2.resourceserver.opaquetoken.client-secret=${CLIENT_SECRET:4cgxI3ywLtMVaBgdUiN1Ou04Cps1AvLx}